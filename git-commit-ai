#!/usr/bin/env python3

import sys
import subprocess
import openai
import os
from string import Template
import tempfile
import re
from prompt_config import COMMIT_PROMPT, COMMIT_TEMPLATE, SYSTEM_PROMPT
import yaml

def check_api_key():
    """Check if OpenAI API key is set"""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("\n❌ OpenAI API key not found")
        print("\nTo fix this:")
        print("1. Get your API key from: https://platform.openai.com/api-keys")
        print("2. Set it with: export OPENAI_API_KEY='your-key-here'")
        sys.exit(1)
    return api_key

def get_current_branch():
    """Get the current git branch name"""
    try:
        result = subprocess.run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
                              capture_output=True,
                              text=True,
                              check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return 'main'
    except Exception as e:
        print(f"\n⚠️  Warning: Could not get branch name: {str(e)}")
        return 'main'

def truncate_diff(diff, max_chars=4000):
    """Truncate diff to stay within token limits while keeping context"""
    if len(diff) <= max_chars:
        return diff
    
    # Split into chunks by file
    chunks = diff.split('diff --git')
    chunks = [f'diff --git{chunk}' for chunk in chunks[1:]]  # Skip empty first chunk
    
    # Start with most important chunks
    result = []
    current_length = 0
    
    for chunk in chunks:
        # Skip binary files
        if 'Binary files' in chunk:
            continue
            
        # Calculate chunk size
        chunk_size = len(chunk)
        
        # If adding this chunk would exceed limit, skip it
        if current_length + chunk_size > max_chars:
            continue
            
        result.append(chunk)
        current_length += chunk_size
    
    truncated_diff = ''.join(result)
    
    # Add warning if we truncated
    if truncated_diff != diff:
        truncated_diff += f"\n\n... (diff truncated, {len(chunks) - len(result)} more files changed)"
    
    return truncated_diff

def get_git_diff():
    """Get both staged and unstaged changes"""
    try:
        # Get staged changes
        staged = subprocess.run(['git', 'diff', '--staged'],
                            capture_output=True,
                            text=True,
                            check=True).stdout
        
        # Get unstaged changes
        unstaged = subprocess.run(['git', 'diff'],
                               capture_output=True,
                               text=True,
                               check=True).stdout
        
        # Combine and truncate diffs
        full_diff = staged + unstaged
        truncated_diff = truncate_diff(full_diff)
        
        return truncated_diff
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Error getting diff: {e.stderr}")
        sys.exit(1)

def get_changed_files():
    """Get a list of all tracked changes"""
    try:
        # Get status in porcelain format for tracked files only
        status = subprocess.run(['git', 'status', '--porcelain'],
                              capture_output=True,
                              text=True,
                              check=True).stdout.splitlines()
        
        changes = []
        for line in status:
            if line and not line.startswith('??'):  # Skip untracked files
                # First two characters are status codes
                index_status = line[0]
                worktree_status = line[1]
                filename = line[3:].strip()
                
                status_map = {
                    'A': 'added',
                    'M': 'modified',
                    'D': 'deleted',
                    'R': 'renamed',
                    'C': 'copied',
                    'U': 'updated',
                }
                
                if index_status != ' ':
                    status = status_map.get(index_status, index_status)
                    changes.append(f"Staged: {filename} ({status})")
                if worktree_status != ' ':
                    status = status_map.get(worktree_status, worktree_status)
                    changes.append(f"Modified: {filename} ({status})")
        
        return changes
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Error getting changed files: {e.stderr}")
        sys.exit(1)

def get_git_root():
    """Get the root directory of the Git repository"""
    try:
        root = subprocess.run(['git', 'rev-parse', '--show-toplevel'],
                            capture_output=True,
                            text=True,
                            check=True).stdout.strip()
        return root
    except subprocess.CalledProcessError:
        return None

def load_custom_prompts():
    """Load custom prompts from .git-commit-ai.yml if it exists"""
    try:
        git_root = get_git_root()
        if not git_root:
            return None

        config_file = os.path.join(git_root, '.git-commit-ai.yml')
        if not os.path.exists(config_file):
            return None

        with open(config_file, 'r') as f:
            config = yaml.safe_load(f)

        if not isinstance(config, dict):
            print("\n⚠️  Warning: Invalid config file format")
            return None

        required_fields = ['system_prompt', 'commit_prompt', 'commit_template']
        if not all(field in config for field in required_fields):
            print("\n⚠️  Warning: Missing required fields in config file")
            return None

        print("\n✨ Using project-specific commit configuration")
        return config

    except Exception as e:
        print(f"\n⚠️  Warning: Error loading config file: {str(e)}")
        return None

def generate_commit_message(diff, changed_files, api_key):
    """Generate a commit message using OpenAI"""
    client = openai.OpenAI(api_key=api_key)
    
    try:
        # Get the current branch name
        branch = get_current_branch()
        
        # Prepare the changes summary
        changes_summary = "\n".join(changed_files[:20])  # Limit number of files shown
        if len(changed_files) > 20:
            changes_summary += f"\n... and {len(changed_files) - 20} more files"
        
        # Load custom prompts if available
        custom_prompts = load_custom_prompts()
        
        # Use custom or default prompts
        system_prompt = custom_prompts['system_prompt'] if custom_prompts else SYSTEM_PROMPT
        commit_prompt = custom_prompts['commit_prompt'] if custom_prompts else COMMIT_PROMPT
        commit_template = custom_prompts['commit_template'] if custom_prompts else COMMIT_TEMPLATE
        
        # Prepare the prompt with all changes
        prompt = commit_prompt.format(
            branch=branch,
            diff=diff,
            files=changes_summary
        )
        
        print("\nGenerating commit message...")
        
        # Call OpenAI API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo-16k",  # Use 16k model for larger contexts
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        
        # Get the message from the response
        message = response.choices[0].message.content.strip()
        
        # Format the message using the template
        commit_message = commit_template.format(
            branch=branch,
            message=message
        )
        
        return commit_message
        
    except Exception as e:
        print(f"\n❌ Error generating commit message: {str(e)}")
        sys.exit(1)

def get_git_editor():
    """Get the configured Git editor"""
    try:
        editor = subprocess.run(['git', 'config', '--get', 'core.editor'],
                              capture_output=True,
                              text=True).stdout.strip()
        if not editor:
            # Try to get system editor
            editor = os.getenv('EDITOR', 'vim')
        return editor
    except Exception:
        return 'vim'  # Default to vim if nothing else works

def cleanup_git_message_files():
    """Clean up any existing commit message files and swap files"""
    try:
        git_dir = subprocess.run(['git', 'rev-parse', '--git-dir'],
                               capture_output=True,
                               text=True,
                               check=True).stdout.strip()
        
        # Files to clean up
        files_to_clean = [
            os.path.join(git_dir, 'COMMIT_EDITMSG'),
            os.path.join(git_dir, '.COMMIT_EDITMSG.swp'),
            os.path.join(git_dir, '.COMMIT_EDITMSG.swo'),
            os.path.join(git_dir, '.COMMIT_EDITMSG.swn')
        ]
        
        for file_path in files_to_clean:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"\n⚠️  Could not remove {file_path}: {str(e)}")
                print("You may need to remove it manually if you encounter editor issues")
    except Exception as e:
        print(f"\n⚠️  Warning: Could not clean up message files: {str(e)}")

def check_for_changes():
    """Check if there are any changes to commit"""
    try:
        # Check both staged and unstaged changes
        status = subprocess.run(['git', 'status', '--porcelain'],
                            capture_output=True,
                            text=True,
                            check=True)
        return bool(status.stdout.strip())
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Error checking git status: {e.stderr}")
        sys.exit(1)

def stage_changes():
    """Stage all tracked changes (like git commit -am)"""
    try:
        # Check if there are staged changes
        staged = subprocess.run(['git', 'diff', '--cached', '--quiet'])
        
        # If there are no staged changes, stage all tracked changes
        if staged.returncode == 0:
            print("\nStaging tracked changes...")
            # Stage all tracked files with changes (like git commit -am)
            subprocess.run(['git', 'add', '-u'], check=True)
            print("✅ Changes staged")
        else:
            print("✅ Using already staged changes")
            
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Error staging changes: {e.stderr}")
        sys.exit(1)

def commit_changes(message):
    """Create a commit with the given message using the default editor"""
    try:
        # Clean up any existing message files first
        cleanup_git_message_files()
        
        # Set up the commit message in a temporary file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.git-commit', delete=False) as f:
            f.write(message)
            temp_path = f.name
        
        # Get initial modification time
        initial_mtime = os.path.getmtime(temp_path)
        
        try:
            # Get the editor command
            editor = get_git_editor()
            print(f"\nOpening editor ({editor})...")
            
            # Open the editor
            result = subprocess.run([editor, temp_path])
            
            # Check if file was modified
            final_mtime = os.path.getmtime(temp_path)
            
            if result.returncode != 0 or final_mtime == initial_mtime:
                print("\n✨ Editor closed without saving, commit canceled")
                sys.exit(1)
            
            # Read the edited message
            with open(temp_path, 'r') as f:
                edited_message = f.read().strip()
            
            if not edited_message:
                print("\n✨ Empty commit message, commit canceled")
                sys.exit(1)
            
            # Create the commit with the edited message
            commit_result = subprocess.run(['git', 'commit', '-m', edited_message],
                                        capture_output=True,
                                        text=True)
            
            if commit_result.returncode != 0:
                stderr = commit_result.stderr.lower()
                if "nothing to commit" in stderr:
                    print("\n❌ No changes to commit")
                elif "no changes added to commit" in stderr:
                    print("\n❌ No changes staged for commit")
                else:
                    print(f"\n❌ Error: {commit_result.stderr}")
                sys.exit(1)
            else:
                print("\n✅ Changes committed successfully")
            
        finally:
            # Clean up the temporary file
            try:
                os.unlink(temp_path)
            except:
                pass
            # Clean up any remaining Git message files
            cleanup_git_message_files()
        
    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        sys.exit(1)

def main():
    """Main function"""
    try:
        print("\nStarting git-commit-ai...")
        
        # Check for changes first, before doing anything else
        print("\nChecking for changes...")
        if not check_for_changes():
            print("\n❌ No changes to commit")
            sys.exit(0)  # Exit cleanly when there are no changes
            
        # Check for OpenAI API key
        api_key = check_api_key()
        
        # Stage changes if needed
        stage_changes()
        
        # Double check that we still have changes after staging
        if not check_for_changes():
            print("\n❌ No changes to commit")
            sys.exit(0)
        
        # Get both staged and unstaged changes
        print("\nGetting diff of changes...")
        diff = get_git_diff()
        changed_files = get_changed_files()
        
        # Generate commit message
        print("\nGenerating commit message...")
        message = generate_commit_message(diff, changed_files, api_key)
        if not message:
            print("\n❌ Failed to generate commit message")
            sys.exit(1)
            
        print("\nOpening editor with generated message...")
        # Create the commit
        commit_changes(message)
        
    except KeyboardInterrupt:
        print("\n\n✨ Operation canceled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
